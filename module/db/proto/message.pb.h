// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
class Fake;
struct FakeDefaultTypeInternal;
extern FakeDefaultTypeInternal _Fake_default_instance_;
class MyMessage;
struct MyMessageDefaultTypeInternal;
extern MyMessageDefaultTypeInternal _MyMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Fake* Arena::CreateMaybeMessage<::Fake>(Arena*);
template<> ::MyMessage* Arena::CreateMaybeMessage<::MyMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Fake final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Fake) */ {
 public:
  inline Fake() : Fake(nullptr) {}
  ~Fake() override;
  explicit PROTOBUF_CONSTEXPR Fake(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Fake(const Fake& from);
  Fake(Fake&& from) noexcept
    : Fake() {
    *this = ::std::move(from);
  }

  inline Fake& operator=(const Fake& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fake& operator=(Fake&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Fake& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fake* internal_default_instance() {
    return reinterpret_cast<const Fake*>(
               &_Fake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Fake& a, Fake& b) {
    a.Swap(&b);
  }
  inline void Swap(Fake* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fake* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Fake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Fake>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Fake& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Fake& from) {
    Fake::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fake* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Fake";
  }
  protected:
  explicit Fake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFkfkFieldNumber = 1,
  };
  // int32 fkfk = 1;
  void clear_fkfk();
  int32_t fkfk() const;
  void set_fkfk(int32_t value);
  private:
  int32_t _internal_fkfk() const;
  void _internal_set_fkfk(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Fake)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t fkfk_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class MyMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MyMessage) */ {
 public:
  inline MyMessage() : MyMessage(nullptr) {}
  ~MyMessage() override;
  explicit PROTOBUF_CONSTEXPR MyMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MyMessage(const MyMessage& from);
  MyMessage(MyMessage&& from) noexcept
    : MyMessage() {
    *this = ::std::move(from);
  }

  inline MyMessage& operator=(const MyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MyMessage& operator=(MyMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MyMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const MyMessage* internal_default_instance() {
    return reinterpret_cast<const MyMessage*>(
               &_MyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MyMessage& a, MyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(MyMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MyMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MyMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MyMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MyMessage& from) {
    MyMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MyMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MyMessage";
  }
  protected:
  explicit MyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 3,
    kNameFieldNumber = 2,
    kSbsbFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // repeated string tags = 3;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Fake sbsb = 4;
  bool has_sbsb() const;
  private:
  bool _internal_has_sbsb() const;
  public:
  void clear_sbsb();
  const ::Fake& sbsb() const;
  PROTOBUF_NODISCARD ::Fake* release_sbsb();
  ::Fake* mutable_sbsb();
  void set_allocated_sbsb(::Fake* sbsb);
  private:
  const ::Fake& _internal_sbsb() const;
  ::Fake* _internal_mutable_sbsb();
  public:
  void unsafe_arena_set_allocated_sbsb(
      ::Fake* sbsb);
  ::Fake* unsafe_arena_release_sbsb();

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:MyMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::Fake* sbsb_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Fake

// int32 fkfk = 1;
inline void Fake::clear_fkfk() {
  _impl_.fkfk_ = 0;
}
inline int32_t Fake::_internal_fkfk() const {
  return _impl_.fkfk_;
}
inline int32_t Fake::fkfk() const {
  // @@protoc_insertion_point(field_get:Fake.fkfk)
  return _internal_fkfk();
}
inline void Fake::_internal_set_fkfk(int32_t value) {
  
  _impl_.fkfk_ = value;
}
inline void Fake::set_fkfk(int32_t value) {
  _internal_set_fkfk(value);
  // @@protoc_insertion_point(field_set:Fake.fkfk)
}

// -------------------------------------------------------------------

// MyMessage

// int32 id = 1;
inline void MyMessage::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t MyMessage::_internal_id() const {
  return _impl_.id_;
}
inline int32_t MyMessage::id() const {
  // @@protoc_insertion_point(field_get:MyMessage.id)
  return _internal_id();
}
inline void MyMessage::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void MyMessage::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MyMessage.id)
}

// string name = 2;
inline void MyMessage::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& MyMessage::name() const {
  // @@protoc_insertion_point(field_get:MyMessage.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MyMessage::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MyMessage.name)
}
inline std::string* MyMessage::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:MyMessage.name)
  return _s;
}
inline const std::string& MyMessage::_internal_name() const {
  return _impl_.name_.Get();
}
inline void MyMessage::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* MyMessage::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* MyMessage::release_name() {
  // @@protoc_insertion_point(field_release:MyMessage.name)
  return _impl_.name_.Release();
}
inline void MyMessage::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MyMessage.name)
}

// repeated string tags = 3;
inline int MyMessage::_internal_tags_size() const {
  return _impl_.tags_.size();
}
inline int MyMessage::tags_size() const {
  return _internal_tags_size();
}
inline void MyMessage::clear_tags() {
  _impl_.tags_.Clear();
}
inline std::string* MyMessage::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:MyMessage.tags)
  return _s;
}
inline const std::string& MyMessage::_internal_tags(int index) const {
  return _impl_.tags_.Get(index);
}
inline const std::string& MyMessage::tags(int index) const {
  // @@protoc_insertion_point(field_get:MyMessage.tags)
  return _internal_tags(index);
}
inline std::string* MyMessage::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:MyMessage.tags)
  return _impl_.tags_.Mutable(index);
}
inline void MyMessage::set_tags(int index, const std::string& value) {
  _impl_.tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:MyMessage.tags)
}
inline void MyMessage::set_tags(int index, std::string&& value) {
  _impl_.tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:MyMessage.tags)
}
inline void MyMessage::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MyMessage.tags)
}
inline void MyMessage::set_tags(int index, const char* value, size_t size) {
  _impl_.tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MyMessage.tags)
}
inline std::string* MyMessage::_internal_add_tags() {
  return _impl_.tags_.Add();
}
inline void MyMessage::add_tags(const std::string& value) {
  _impl_.tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MyMessage.tags)
}
inline void MyMessage::add_tags(std::string&& value) {
  _impl_.tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:MyMessage.tags)
}
inline void MyMessage::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MyMessage.tags)
}
inline void MyMessage::add_tags(const char* value, size_t size) {
  _impl_.tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MyMessage.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MyMessage::tags() const {
  // @@protoc_insertion_point(field_list:MyMessage.tags)
  return _impl_.tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MyMessage::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:MyMessage.tags)
  return &_impl_.tags_;
}

// .Fake sbsb = 4;
inline bool MyMessage::_internal_has_sbsb() const {
  return this != internal_default_instance() && _impl_.sbsb_ != nullptr;
}
inline bool MyMessage::has_sbsb() const {
  return _internal_has_sbsb();
}
inline void MyMessage::clear_sbsb() {
  if (GetArenaForAllocation() == nullptr && _impl_.sbsb_ != nullptr) {
    delete _impl_.sbsb_;
  }
  _impl_.sbsb_ = nullptr;
}
inline const ::Fake& MyMessage::_internal_sbsb() const {
  const ::Fake* p = _impl_.sbsb_;
  return p != nullptr ? *p : reinterpret_cast<const ::Fake&>(
      ::_Fake_default_instance_);
}
inline const ::Fake& MyMessage::sbsb() const {
  // @@protoc_insertion_point(field_get:MyMessage.sbsb)
  return _internal_sbsb();
}
inline void MyMessage::unsafe_arena_set_allocated_sbsb(
    ::Fake* sbsb) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sbsb_);
  }
  _impl_.sbsb_ = sbsb;
  if (sbsb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MyMessage.sbsb)
}
inline ::Fake* MyMessage::release_sbsb() {
  
  ::Fake* temp = _impl_.sbsb_;
  _impl_.sbsb_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Fake* MyMessage::unsafe_arena_release_sbsb() {
  // @@protoc_insertion_point(field_release:MyMessage.sbsb)
  
  ::Fake* temp = _impl_.sbsb_;
  _impl_.sbsb_ = nullptr;
  return temp;
}
inline ::Fake* MyMessage::_internal_mutable_sbsb() {
  
  if (_impl_.sbsb_ == nullptr) {
    auto* p = CreateMaybeMessage<::Fake>(GetArenaForAllocation());
    _impl_.sbsb_ = p;
  }
  return _impl_.sbsb_;
}
inline ::Fake* MyMessage::mutable_sbsb() {
  ::Fake* _msg = _internal_mutable_sbsb();
  // @@protoc_insertion_point(field_mutable:MyMessage.sbsb)
  return _msg;
}
inline void MyMessage::set_allocated_sbsb(::Fake* sbsb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sbsb_;
  }
  if (sbsb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sbsb);
    if (message_arena != submessage_arena) {
      sbsb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sbsb, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sbsb_ = sbsb;
  // @@protoc_insertion_point(field_set_allocated:MyMessage.sbsb)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
